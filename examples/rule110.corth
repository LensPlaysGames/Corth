// Triangle side length
mem 9999 +  80  storeb

// Initialize column pattern
// The column pattern is simply a condition for each
//   column that is being drawn, in the form of a bit.
// It is updated throughout runtime, causing the fancy drawing
//   you see in the output to appear.
// Example pattern: 1100001010
// Example output:  **    * *
mem 1                 + 1 storeb
// Store a `1` at (amount of columns - 1) in pattern
mem mem 9999 + loadb 1 - + 1 storeb

0 // Loop over lines
while dup mem 9999 + loadb 2 - < do
  0 // Loop over columns, print character
  while dup mem 9999 + loadb < do
    // Test pattern to set current character to draw
	// The current character is stored at mem[1000]
    dup mem + loadb if
	  // Load a '*' into current character memory
	  mem 1000 + 42 storeb
	else
	  // Load a ' ' into current character memory
	  mem 1000 + 32 storeb
	endif

    // Print character
    mem 1000 + loadb dump_c

    // Increment column counter
    1 +
  endwhile
  drop

  // Print newline
  10 dump_c

  // Load Pattern
  mem 0 + loadb 1 << mem 1 + loadb or
  1 // Loop over columns, shift pattern
  while dup mem 9999 + loadb 1 - < do
    // Pattern to top of stack, ((pattern << 1) && 7)
  	swap 1 << 7 and
	// Copy index to top of stack, load value at memory address + index
	over mem + loadb or
	// Duplicate index + pattern
	twodup
	// ((110 >> pattern) && 1)
	110 swap >> 1 and
	// Swap duped index and pattern
	swap
	// Write new pattern to memory
	mem + swap storeb
	// Swap pattern and index for loop increment
	swap
    1 +
  endwhile
  drop drop
  
  // Increment line counter
  1 +
endwhile
drop
